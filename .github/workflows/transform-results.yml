name: üîÑ Transform Results

on:
  workflow_run:
    workflows: ["üìà Benchmark"]
    types: [completed]
    branches: [main]

permissions:
  contents: write
  actions: read

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  transform-results:
    name: Transform & Commit Results
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì¶ Install Python Dependencies
        run: |
          pip install -r scripts/requirements.txt

      - name: üì• Download Benchmark Results
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          pattern: benchmark-results-*
          path: ./downloaded-artifacts

      - name: üîç Verify Downloaded Artifacts
        run: |
          echo "üìÇ Downloaded artifacts structure:"
          find ./downloaded-artifacts -type f -name "*.json" | head -20 || echo "No JSON files found"
          
          if [ ! -d "./downloaded-artifacts" ] || [ -z "$(find ./downloaded-artifacts -name "*.json" -type f)" ]; then
            echo "‚ùå No benchmark results found in artifacts"
            exit 1
          fi
          
          echo "‚úÖ Found benchmark results"

      - name: üóÇÔ∏è Prepare Benchmark Results Directory
        run: |
          # Create benchmark-results directory structure
          mkdir -p benchmark-results
          
          # Find and copy the benchmark results from artifacts
          artifact_dir=$(find ./downloaded-artifacts -name "benchmark-results-*" -type d | head -1)
          if [ -n "$artifact_dir" ]; then
            echo "üìÇ Copying results from: $artifact_dir"
            cp -r "$artifact_dir"/* benchmark-results/ 2>/dev/null || {
              # Try alternative structure
              find "$artifact_dir" -name "*.json" -exec cp {} benchmark-results/ \; 2>/dev/null || true
            }
          else
            echo "‚ùå Could not find benchmark results in artifacts"
            exit 1
          fi
          
          # Read workflow context to determine if we should skip main branch commit
          if [ -f "benchmark-results/workflow-context.json" ]; then
            SKIP_COMMIT=$(python3 -c "import json; print(json.load(open('benchmark-results/workflow-context.json')).get('skip_commit', 'false'))" 2>/dev/null || echo "false")
            echo "SKIP_MAIN_COMMIT=$SKIP_COMMIT" >> $GITHUB_ENV
            echo "üìã Workflow context: skip_commit=$SKIP_COMMIT"
            rm benchmark-results/workflow-context.json  # Clean up
          else
            echo "SKIP_MAIN_COMMIT=false" >> $GITHUB_ENV
            echo "üìã No workflow context found, defaulting to commit to main branch"
          fi
          
          echo "üìä Final benchmark-results structure:"
          find benchmark-results -type f -name "*.json" | head -10

      - name: üîÑ Transform Results
        run: |
          echo "üîÑ Transforming benchmark results..."
          
          # Ensure results directory exists
          mkdir -p results
          
          # Set PYTHONPATH for our transform scripts
          export PYTHONPATH="$PWD:$PWD/scripts"
          
          # Transform results with averaging (since benchmarks might run multiple executions)
          python scripts/transform/benchmark_results.py \
            --format both \
            --average \
            --results-dir benchmark-results \
            --output-dir results

          echo "üìä Generated files:"
          ls -la results/

      - name: üìä Generate Chart Configurations
        run: |
          echo "üìä Generating Chart.js configurations..."
          python scripts/transform/build_charts.py
          echo "‚úÖ Chart configurations and README charts generated"

      - name: üìä Generate Framework Stats
        run: |
          echo "üìä Generating framework stats..."
          python scripts/transform/fetch_framework_stats.py || echo "‚ö†Ô∏è Framework stats generation failed"

      - name: üìä Generate Results Summary
        run: |
          echo "## üîÑ Benchmark Results Transformation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: Workflow run #${{ github.event.workflow_run.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Main Branch Commit**: $([ "$SKIP_MAIN_COMMIT" = "true" ] && echo "‚è≠Ô∏è Skipped" || echo "‚úÖ Updated")" >> $GITHUB_STEP_SUMMARY

      - name: üìù Commit to Results Branch
        run: |
          set -e
          TIMESTAMP=$(date -u '+%Y%m%d_%H%M%S')
          CURRENT_DIR=$(pwd)
          
          git config user.name "liss-bot"
          git config user.email "alicia-gh-bot@mail.as93.net"
          
          # Create temporary directory for results branch
          mkdir -p /tmp/results-branch
          cd /tmp/results-branch
          
          # Initialize or fetch results branch
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git fetch origin results:results 2>/dev/null && git checkout results || {
            git checkout --orphan results
            git rm -rf . 2>/dev/null || true
          }
          
          # Set up directory structure
          mkdir -p raw summary charts stats
          
          # Copy files from main workspace
          [ -d "$CURRENT_DIR/benchmark-results" ] && cp -r "$CURRENT_DIR/benchmark-results"/* raw/ 2>/dev/null || true
          [ -f "$CURRENT_DIR/results/summary.json" ] && cp "$CURRENT_DIR/results/summary.json" summary/summary-${TIMESTAMP}.json
          [ -f "$CURRENT_DIR/results/summary.tsv" ] && cp "$CURRENT_DIR/results/summary.tsv" summary/summary-${TIMESTAMP}.tsv
          [ -f "$CURRENT_DIR/results/summary.json" ] && cp "$CURRENT_DIR/results/summary.json" summary/summary.json
          [ -f "$CURRENT_DIR/results/summary.tsv" ] && cp "$CURRENT_DIR/results/summary.tsv" summary/summary.tsv
          [ -d "$CURRENT_DIR/website/static/charts" ] && cp -r "$CURRENT_DIR/website/static/charts"/* charts/ 2>/dev/null || true
          [ -f "$CURRENT_DIR/results/framework-stats.json" ] && cp "$CURRENT_DIR/results/framework-stats.json" stats/stats-${TIMESTAMP}.json
          [ -f "$CURRENT_DIR/results/framework-stats.json" ] && cp "$CURRENT_DIR/results/framework-stats.json" stats/framework-stats.json
          
          # Commit and push if there are changes
          git add . || true
          if ! git diff --cached --quiet; then
            git commit -m "chore: update results from run #${{ github.event.workflow_run.run_number }} [${TIMESTAMP}]"
            git push origin results
            echo "‚úÖ Results committed to results branch"
          else
            echo "‚ÑπÔ∏è No changes to commit to results branch"
          fi
          
          # Return to main workspace and conditionally update main branch
          cd "$CURRENT_DIR"
          if [ "$SKIP_MAIN_COMMIT" = "true" ]; then
            echo "‚è≠Ô∏è Skipping main branch commit (skip_commit=true)"
          else
            git add results/ website/static/chart*.json website/static/charts/ .github/README.md || true
            if ! git diff --cached --quiet; then
              git commit -m "chore(results): update benchmark summaries from run #${{ github.event.workflow_run.run_number }}"
              git push
              echo "‚úÖ Main branch updated"
            else
              echo "‚ÑπÔ∏è No changes to commit to main branch"
            fi
          fi

      - name: üßπ Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up temporary files..."
          rm -rf ./downloaded-artifacts benchmark-results /tmp/results-branch
          echo "‚úÖ Cleanup complete"
