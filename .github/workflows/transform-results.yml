name: üîÑ Transform Results

on:
  workflow_run:
    workflows: ["üìà Benchmark"]
    types: [completed]
    branches: [main]

permissions:
  contents: write
  actions: read

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  transform-results:
    name: Transform & Commit Results
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì¶ Install Python Dependencies
        run: |
          pip install -r scripts/requirements.txt

      - name: üì• Download Benchmark Results
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          pattern: benchmark-results-*
          path: ./downloaded-artifacts

      - name: üîç Verify Downloaded Artifacts
        run: |
          echo "üìÇ Downloaded artifacts structure:"
          find ./downloaded-artifacts -type f -name "*.json" | head -20 || echo "No JSON files found"
          
          if [ ! -d "./downloaded-artifacts" ] || [ -z "$(find ./downloaded-artifacts -name "*.json" -type f)" ]; then
            echo "‚ùå No benchmark results found in artifacts"
            exit 1
          fi
          
          echo "‚úÖ Found benchmark results"

      - name: üóÇÔ∏è Prepare Benchmark Results Directory
        run: |
          # Create benchmark-results directory structure
          mkdir -p benchmark-results
          
          # Find and copy the benchmark results from artifacts
          artifact_dir=$(find ./downloaded-artifacts -name "benchmark-results-*" -type d | head -1)
          if [ -n "$artifact_dir" ]; then
            echo "üìÇ Copying results from: $artifact_dir"
            # Check if there's a nested benchmark-results directory
            if [ -d "$artifact_dir/benchmark-results" ]; then
              cp -r "$artifact_dir/benchmark-results"/* benchmark-results/ 2>/dev/null || true
            else
              cp -r "$artifact_dir"/* benchmark-results/ 2>/dev/null || true
            fi
            # Try alternative structure if nothing was copied
            if [ -z "$(find benchmark-results -name "*.json" -type f 2>/dev/null)" ]; then
              find "$artifact_dir" -name "*.json" -exec cp {} benchmark-results/ \; 2>/dev/null || true
            fi
          else
            echo "‚ùå Could not find benchmark results in artifacts"
            exit 1
          fi
          
          # Read workflow context to determine if we should skip main branch commit  
          context_file=""
          if [ -f "benchmark-results/workflow-context.json" ]; then
            context_file="benchmark-results/workflow-context.json"
          elif [ -f "$artifact_dir/workflow-context.json" ]; then
            context_file="$artifact_dir/workflow-context.json"
          fi
          
          if [ -n "$context_file" ]; then
            COMMIT_TO_MAIN=$(python3 -c "import json; print(json.load(open('$context_file')).get('commit_to_main', 'false'))" 2>/dev/null || echo "false")
            echo "COMMIT_TO_MAIN=$COMMIT_TO_MAIN" >> $GITHUB_ENV
            echo "üìã Workflow context: commit_to_main=$COMMIT_TO_MAIN"
            rm "$context_file" 2>/dev/null || true  # Clean up
          else
            echo "COMMIT_TO_MAIN=false" >> $GITHUB_ENV
            echo "üìã No workflow context found, defaulting to skip main branch commit"
          fi
          
          echo "üìä Final benchmark-results structure:"
          find benchmark-results -type f -name "*.json" | head -10

      - name: üîÑ Transform Results
        run: |
          echo "üîÑ Transforming benchmark results..."
          
          # Ensure results directory exists
          mkdir -p results
          
          # Set PYTHONPATH for our transform scripts
          export PYTHONPATH="$PWD:$PWD/scripts"
          
          # Transform results with averaging (since benchmarks might run multiple executions)
          python scripts/transform/benchmark_results.py \
            --format both \
            --average \
            --results-dir benchmark-results \
            --output-dir results

          echo "üìä Generated files:"
          ls -la results/

      - name: üìä Generate Chart Configurations
        run: |
          echo "üìä Generating Chart.js configurations..."
          python scripts/transform/build_charts.py
          echo "‚úÖ Chart configurations and README charts generated"

      - name: üìä Generate Framework Stats
        run: |
          echo "üìä Generating framework stats..."
          python scripts/transform/fetch_framework_stats.py || echo "‚ö†Ô∏è Framework stats generation failed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Generate Results Summary
        run: |
          echo "## üîÑ Benchmark Results Transformation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: Workflow run #${{ github.event.workflow_run.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Main Branch Commit**: $([ "$COMMIT_TO_MAIN" = "true" ] && echo "‚úÖ Enabled" || echo "‚è≠Ô∏è Skipped")" >> $GITHUB_STEP_SUMMARY

      - name: üìù Commit to Results Branch
        run: |
          set -e
          TIMESTAMP=$(date -u '+%Y%m%d_%H%M%S')
          
          git config user.name "liss-bot"
          git config user.email "alicia-gh-bot@mail.as93.net"
          
          # Switch to results branch (explicit branch reference to avoid directory confusion)
          git fetch origin results:results 2>/dev/null || echo "Results branch doesn't exist yet"
          git checkout -B results origin/results 2>/dev/null || git checkout --orphan results
          
          git pull origin results 2>/dev/null || true

          # Set up directory structure
          mkdir -p raw summary charts stats
          
          # Copy files to organized structure
          [ -d "benchmark-results" ] && cp -r benchmark-results/* raw/ 2>/dev/null || true
          [ -f "results/summary.json" ] && cp results/summary.json summary/summary-${TIMESTAMP}.json 2>/dev/null || true
          [ -f "results/summary.tsv" ] && cp results/summary.tsv summary/summary-${TIMESTAMP}.tsv 2>/dev/null || true
          [ -f "results/summary.json" ] && cp results/summary.json summary/summary.json 2>/dev/null || true
          [ -f "results/summary.tsv" ] && cp results/summary.tsv summary/summary.tsv 2>/dev/null || true
          [ -d "website/static/charts" ] && cp -r website/static/charts/* charts/ 2>/dev/null || true
          [ -f "results/framework-stats.json" ] && cp results/framework-stats.json stats/stats-${TIMESTAMP}.json 2>/dev/null || true
          [ -f "results/framework-stats.json" ] && cp results/framework-stats.json stats/framework-stats.json 2>/dev/null || true
          
          # Commit and push results branch
          if git add raw/ summary/ charts/ stats/ && ! git diff --staged --quiet; then
            git commit -m "chore: update results from run #${{ github.event.workflow_run.run_number }} [${TIMESTAMP}]"
            if git push origin results; then
              echo "‚úÖ Results committed to results branch"
            else
              echo "‚ö†Ô∏è Failed to push results branch updates"
            fi
          else
            echo "‚ÑπÔ∏è No changes to commit to results branch"
          fi

      - name: üìù Commit to Main Branch  
        run: |
          git config user.name "liss-bot"
          git config user.email "alicia-gh-bot@mail.as93.net"
          
          # Switch back to main branch
          git checkout main
          
          if [ "$COMMIT_TO_MAIN" = "true" ]; then
            git add results/ website/static/chart*.json website/static/charts/ .github/README.md || true
            if ! git diff --cached --quiet; then
              git commit -m "chore(results): update benchmark summaries from run #${{ github.event.workflow_run.run_number }}"
              git push
              echo "‚úÖ Main branch updated"
            else
              echo "‚ÑπÔ∏è No changes to commit to main branch"
            fi
          else
            echo "‚è≠Ô∏è Skipping main branch commit (commit_to_main=false)"
          fi

      - name: üßπ Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up temporary files..."
          rm -rf ./downloaded-artifacts benchmark-results /tmp/results-branch
          echo "‚úÖ Cleanup complete"
