name: 📊 Coverage

on:
  workflow_dispatch:
    inputs:
      frameworks:
        description: 'Frameworks to test (comma-separated, see frameworks.json for available options)'
        required: false
        default: 'all'
        type: string
  pull_request:
    branches: [ main, dev ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'frameworks.json'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  setup:
    name: Setup for Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      frameworks: ${{ steps.matrix.outputs.frameworks }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: scripts/requirements.txt
          
      - name: Install Python dependencies
        run: pip install -r scripts/requirements.txt
          
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps
          
      - name: Run setup script
        run: python scripts/setup/main.py --skip-build
        
      - name: Determine frameworks to test
        id: matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.frameworks }}" != "all" ]; then
            frameworks="${{ github.event.inputs.frameworks }}"
          else
            frameworks=$(python scripts/get_frameworks.py)
          fi
          echo "frameworks=$(echo "[$frameworks]" | sed 's/,/", "/g' | sed 's/\[/[\"/ ; s/\]/\"]/')" >> $GITHUB_OUTPUT
          echo "Coverage frameworks: $frameworks"

  coverage:
    name: Coverage ${{ matrix.framework }}
    needs: setup
    if: fromJSON(needs.setup.outputs.frameworks)[0] != ''
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        framework: ${{ fromJSON(needs.setup.outputs.frameworks) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: scripts/requirements.txt
          
      - name: Install Python dependencies
        run: pip install -r scripts/requirements.txt
          
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps
          
      - name: Run setup for coverage
        run: python scripts/setup/main.py --skip-build
        
      - name: Install coverage dependencies
        run: |
          npm install -g nyc
          npm install --save-dev @playwright/test
          
      - name: Run coverage tests for ${{ matrix.framework }}
        id: coverage-run
        continue-on-error: true
        run: |
          echo "🔍 Running ${{ matrix.framework }} coverage collection"
          
          # Create coverage test that instruments JavaScript
          cat > coverage-test.js << 'EOF'
          const { test } = require('@playwright/test');
          
          test('collect JavaScript coverage for ${{ matrix.framework }}', async ({ page }) => {
            // Start JS coverage
            await page.coverage.startJSCoverage({ 
              resetOnNavigation: false,
              includeRawScriptCoverage: true 
            });
            
            try {
              // Navigate to the app
              await page.goto('/', { waitUntil: 'networkidle' });
              console.log('Navigated to app');
              
              // Wait for the page to be ready
              await page.waitForTimeout(2000);
              
              // Try to interact with search functionality
              const searchSelectors = [
                'input[type="text"]',
                'input[placeholder*="city" i]',
                'input[id*="search" i]',
                'input[name*="city" i]',
                'input[class*="search" i]',
                '.search input',
                '#search',
                '[data-testid*="search"] input'
              ];
              
              let searchFound = false;
              for (const selector of searchSelectors) {
                try {
                  const input = page.locator(selector).first();
                  if (await input.count() > 0 && await input.isVisible()) {
                    await input.fill('London');
                    await page.keyboard.press('Enter');
                    await page.waitForTimeout(3000);
                    searchFound = true;
                    console.log(`Found and used search input: ${selector}`);
                    break;
                  }
                } catch (e) {
                  // Continue to next selector
                }
              }
              
              if (!searchFound) {
                console.log('No search input found, continuing...');
              }
              
              // Try to trigger various UI interactions
              const interactionSelectors = [
                'button',
                '.btn',
                '[role="button"]',
                'a[href]',
                '.weather',
                '.forecast',
                '[data-testid]',
                '.card',
                '.item'
              ];
              
              for (const selector of interactionSelectors.slice(0, 3)) {
                try {
                  const elements = page.locator(selector);
                  const count = await elements.count();
                  if (count > 0) {
                    const element = elements.first();
                    if (await element.isVisible()) {
                      await element.click({ timeout: 1000 });
                      await page.waitForTimeout(500);
                      console.log(`Clicked element: ${selector}`);
                    }
                  }
                } catch (e) {
                  // Continue to next interaction
                }
              }
              
            } catch (error) {
              console.log('Error during interaction:', error.message);
            }
            
            // Collect coverage
            const coverage = await page.coverage.stopJSCoverage();
            console.log(`Collected coverage for ${coverage.length} files`);
            
            // Calculate coverage statistics
            let totalBytes = 0;
            let usedBytes = 0;
            let relevantFiles = 0;
            
            for (const entry of coverage) {
              // Filter for app files (exclude external dependencies)
              const isAppFile = entry.url.includes('localhost') && 
                               !entry.url.includes('node_modules') &&
                               !entry.url.includes('vite/dist') &&
                               !entry.url.includes('/@vite/') &&
                               !entry.url.includes('/@fs/') &&
                               entry.text.length > 100; // Skip very small files
              
              if (isAppFile) {
                relevantFiles++;
                totalBytes += entry.text.length;
                for (const range of entry.ranges) {
                  usedBytes += range.end - range.start;
                }
                console.log(`File: ${entry.url} - ${entry.text.length} bytes`);
              }
            }
            
            const coveragePercentage = totalBytes > 0 ? Math.round((usedBytes / totalBytes) * 100) : 0;
            
            // Save coverage data
            const coverageData = {
              framework: '${{ matrix.framework }}',
              totalBytes,
              usedBytes,
              coveragePercentage,
              relevantFiles,
              timestamp: new Date().toISOString()
            };
            
            require('fs').writeFileSync('coverage-${{ matrix.framework }}-data.json', JSON.stringify(coverageData, null, 2));
            
            console.log(`Final Coverage: ${coveragePercentage}% (${usedBytes}/${totalBytes} bytes across ${relevantFiles} files)`);
          });
          EOF
          
          # Create coverage-specific Playwright config
          cat > playwright-coverage.config.js << 'EOF'
          const { createConfig } = require('./tests/config/playwright.config.base.js');
          const baseConfig = createConfig('${{ matrix.framework }}');
          
          module.exports = {
            ...baseConfig,
            testDir: './',
            testMatch: 'coverage-test.js',
            use: {
              ...baseConfig.use,
              trace: 'off',
              video: 'off',
              screenshot: 'off',
            },
            timeout: 60000,
            reporter: [['json', { outputFile: 'coverage-${{ matrix.framework }}.json' }]],
          };
          EOF
          
          # Run coverage collection
          npx playwright test --config=playwright-coverage.config.js || true
          
      - name: Generate coverage report
        continue-on-error: true
        run: |
          coverage=0
          
          # Extract coverage from data file
          if [ -f "coverage-${{ matrix.framework }}-data.json" ]; then
            coverage=$(jq -r '.coveragePercentage // 0' coverage-${{ matrix.framework }}-data.json)
            echo "Real JavaScript coverage for ${{ matrix.framework }}: ${coverage}%"
          else
            echo "No coverage data found for ${{ matrix.framework }}"
          fi
          
          echo "COVERAGE_PERCENT=$coverage" >> $GITHUB_ENV
          
      - name: Generate and commit coverage badge
        if: always()
        continue-on-error: true
        run: |
          coverage="${COVERAGE_PERCENT:-0}"
          
          # Determine badge color based on coverage
          if [ "$coverage" -ge 80 ]; then
            color="brightgreen"
          elif [ "$coverage" -ge 60 ]; then
            color="yellow"
          elif [ "$coverage" -ge 40 ]; then
            color="orange"
          else
            color="red"
          fi
          
          # Generate and commit badge
          badge_url="https://img.shields.io/badge/coverage-${coverage}%25-${color}"
          curl -o "coverage-${{ matrix.framework }}.svg" "$badge_url"
          
          # Commit to badges branch
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git fetch origin badges:badges 2>/dev/null || git checkout --orphan badges
          git checkout badges 2>/dev/null || true
          git add "coverage-${{ matrix.framework }}.svg"
          git commit -m "Update coverage-${{ matrix.framework }} badge" || true
          git push origin badges || true
          
      - name: Upload coverage data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.framework }}
          path: |
            coverage-${{ matrix.framework }}.json
            coverage-${{ matrix.framework }}.svg
          retention-days: 7

  summary:
    name: Coverage Summary
    needs: [setup, coverage]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download coverage artifacts
        if: always()
        uses: actions/download-artifact@v4
        with:
          pattern: "coverage-*"
          path: coverage-artifacts
          merge-multiple: true
          
      - name: Generate coverage summary
        run: |
          frameworks="${{ needs.setup.outputs.frameworks }}"
          frameworks_array=($(echo "$frameworks" | tr -d '[]"' | tr ',' '\n' | xargs))
          
          total_coverage=0
          framework_count=0
          
          {
            echo "# 📊 Coverage Results Summary"
            echo ""
            echo "| Framework | Coverage | Status |"
            echo "|-----------|----------|--------|"
          } >> $GITHUB_STEP_SUMMARY
          
          for framework in "${frameworks_array[@]}"; do
            coverage_data_file="coverage-artifacts/coverage-${framework}-data.json"
            if [[ -f "$coverage_data_file" ]]; then
              # Extract coverage from data file
              coverage=$(jq -r '.coveragePercentage // 0' "$coverage_data_file" 2>/dev/null || echo "0")
              files=$(jq -r '.relevantFiles // 0' "$coverage_data_file" 2>/dev/null || echo "0")
              
              total_coverage=$((total_coverage + coverage))
              framework_count=$((framework_count + 1))
              
              if [ "$coverage" -ge 80 ]; then
                icon="🟢"
                status="Excellent"
              elif [ "$coverage" -ge 60 ]; then
                icon="🟡"
                status="Good"
              elif [ "$coverage" -ge 40 ]; then
                icon="🟠"
                status="Fair"
              else
                icon="🔴"
                status="Poor"
              fi
              
              echo "| **${framework}** | ${coverage}% (${files} files) | ${icon} ${status} |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **${framework}** | N/A | ⚪ Missing |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          if [ "$framework_count" -gt 0 ]; then
            avg_coverage=$((total_coverage / framework_count))
            {
              echo ""
              echo "> **Average Coverage: ${avg_coverage}%** across ${framework_count} frameworks"
            } >> $GITHUB_STEP_SUMMARY
          fi