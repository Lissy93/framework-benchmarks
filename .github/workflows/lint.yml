name: üßº Lint

on:
  workflow_dispatch:
    inputs:
      frameworks:
        description: 'Frameworks to lint (comma-separated, see frameworks.json for available options)'
        required: false
        default: 'all'
        type: string
  pull_request:
    branches: [ main, master, dev ]
    paths:
      - 'apps/**'
      - 'eslint.config.js'
      - 'package.json'
      - '.github/workflows/lint.yml'
    types: [ opened, synchronize, reopened ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup for Linting
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      frameworks: ${{ steps.matrix.outputs.frameworks }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: scripts/requirements.txt
          
      - name: Install Python dependencies
        run: pip install -r scripts/requirements.txt
          
      - name: Install dependencies
        run: npm ci
        
      - name: Determine frameworks to lint
        id: matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.frameworks }}" != "all" ]; then
            frameworks="${{ github.event.inputs.frameworks }}"
          else
            # Get framework list from Python config
            frameworks=$(python scripts/get_frameworks.py)
          fi
          echo "frameworks=$(echo "[$frameworks]" | sed 's/,/", "/g' | sed 's/\[/[\"/ ; s/\]/\"]/')" >> $GITHUB_OUTPUT
          echo "Linting frameworks: $frameworks"

  lint:
    name: Lint ${{ matrix.framework }}
    needs: setup
    if: fromJSON(needs.setup.outputs.frameworks)[0] != ''
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        framework: ${{ fromJSON(needs.setup.outputs.frameworks) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint for ${{ matrix.framework }}
        run: npm run lint:${{ matrix.framework }}
        
      - name: Generate lint report for ${{ matrix.framework }}
        if: always()
        run: |
          mkdir -p lint-reports
          npm run lint:${{ matrix.framework }} -- --format=json --output-file=lint-reports/${{ matrix.framework }}-lint-report.json || true
          
      - name: Upload lint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report-${{ matrix.framework }}
          path: lint-reports/${{ matrix.framework }}-lint-report.json
          retention-days: 30

  summary:
    name: Lint Summary
    needs: [setup, lint]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download all lint reports
        uses: actions/download-artifact@v4
        with:
          path: lint-reports
          merge-multiple: true
          
      - name: Generate lint summary
        run: |
          # Get the frameworks that were actually tested
          frameworks=$(echo '${{ needs.setup.outputs.frameworks }}' | jq -r '.[]' | tr '\n' ' ')
          
          total_apps=0
          passed_apps=0
          total_errors=0
          total_warnings=0
          table_rows=""
          
          for framework in $frameworks; do
            total_apps=$((total_apps + 1))
            report_file="lint-reports/${framework}-lint-report.json"
            
            if [ -f "$report_file" ]; then
              # Count actual errors and warnings from the JSON
              error_count=$(jq '[.[].errorCount] | add // 0' "$report_file" 2>/dev/null || echo "0")
              warning_count=$(jq '[.[].warningCount] | add // 0' "$report_file" 2>/dev/null || echo "0")
              
              total_errors=$((total_errors + error_count))
              total_warnings=$((total_warnings + warning_count))
              
              if [ "$error_count" = "0" ] && [ "$warning_count" = "0" ]; then
                table_rows="$table_rows| **$framework** | ‚úÖ **Clean** | No issues |\n"
                passed_apps=$((passed_apps + 1))
              else
                issues=""
                if [ "$error_count" -gt "0" ]; then
                  issues="$error_count errors"
                fi
                if [ "$warning_count" -gt "0" ]; then
                  if [ -n "$issues" ]; then
                    issues="$issues, $warning_count warnings"
                  else
                    issues="$warning_count warnings"
                  fi
                fi
                table_rows="$table_rows| **$framework** | ‚ùå **Issues** | $issues |\n"
              fi
            else
              table_rows="$table_rows| **$framework** | ‚ùì **Missing** | No report found |\n"
            fi
          done
          
          # Generate summary
          {
            echo "# üßº Lint Results Summary"
            echo ""
            if [ "$total_errors" -eq "0" ] && [ "$total_warnings" -eq "0" ]; then
              echo "> üéâ **Perfect!** All $total_apps apps passed lint checks with no issues."
            else
              issues_text=""
              if [ "$total_errors" -gt "0" ]; then
                issues_text="$total_errors errors"
              fi
              if [ "$total_warnings" -gt "0" ]; then
                if [ -n "$issues_text" ]; then
                  issues_text="$issues_text and $total_warnings warnings"
                else
                  issues_text="$total_warnings warnings"
                fi
              fi
              echo "> ‚ö†Ô∏è **$passed_apps/$total_apps** apps passed lint checks, $issues_text need addressing (see below for details)."
            fi
            
            # Only show table if there are results
            if [ -n "$table_rows" ]; then
              echo ""
              echo "| Framework | Status | Issues |"
              echo "|-----------|--------|--------|"
              echo -e "$table_rows"
            fi
          } >> $GITHUB_STEP_SUMMARY
          
      - name: Check overall status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "‚ùå Some linting failed"
            exit 1
          else
            echo "‚úÖ All linting passed successfully!"
          fi