name: üî® Build

on:
  workflow_dispatch:
    inputs:
      frameworks:
        description: 'Frameworks to build (comma-separated, see frameworks.json for available options)'
        required: false
        default: 'all'
        type: string
  pull_request:
    branches: [ main, master, dev ]
    paths:
      - 'apps/**'
      - 'frameworks.json'
      - 'config.json'
      - '.github/workflows/build.yml'
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read

jobs:
  setup:
    name: Setup and Prepare Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      frameworks: ${{ steps.matrix.outputs.frameworks }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: scripts/requirements.txt
          
      - name: Install dependencies and setup project
        run: |
          pip install -r scripts/requirements.txt
          npm ci
          python scripts/setup/main.py --skip-build
          
      - name: Verify setup
        run: python scripts/verify/check.py
        
      - name: Cache setup for build jobs
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            apps/*/public
            apps/*/static
            assets
          key: setup-cache-${{ github.sha }}
        
      - name: Determine frameworks to build
        id: matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.frameworks }}" != "all" ]; then
            frameworks="${{ github.event.inputs.frameworks }}"
          else
            frameworks=$(python scripts/get_frameworks.py)
          fi
          echo "frameworks=$(echo "[$frameworks]" | sed 's/,/", "/g' | sed 's/\[/[\"/ ; s/\]/\"]/')" >> $GITHUB_OUTPUT
          echo "Building frameworks: $frameworks"

  build:
    name: Build ${{ matrix.framework }}
    needs: setup
    if: fromJSON(needs.setup.outputs.frameworks)[0] != ''
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        framework: ${{ fromJSON(needs.setup.outputs.frameworks) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: scripts/requirements.txt
          
      - name: Install Python dependencies
        run: pip install -r scripts/requirements.txt
        
      - name: Restore setup cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            apps/*/public
            apps/*/static
            assets
          key: setup-cache-${{ github.sha }}
          fail-on-cache-miss: true
        
      - name: Build ${{ matrix.framework }}
        id: build-run
        run: |
          if python scripts/run/build.py --framework ${{ matrix.framework }} --ci; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Prepare artifacts
        if: always()
        run: |
          echo "Build status: ${{ steps.build-run.outputs.status }}"
          cd apps/${{ matrix.framework }}
          ls -la
          echo "Looking for build outputs..."
          
          if [ "${{ steps.build-run.outputs.status }}" == "success" ]; then
            mkdir -p ../../artifacts/${{ matrix.framework }}
            
            # Use same logic as serve.py to find correct build directory
            framework="${{ matrix.framework }}"
            if [ "$framework" = "svelte" ]; then
              build_dir="build"
            elif [ "$framework" = "angular" ]; then
              build_dir="dist/weather-app-angular"
            elif [ "$framework" = "vanilla" ] || [ "$framework" = "alpine" ]; then
              build_dir=""  # No build directory needed
            else
              build_dir="dist"  # Default for most frameworks
            fi
            
            if [ -n "$build_dir" ] && [ -d "$build_dir" ]; then
              echo "Found build directory: $build_dir"
              cp -r "$build_dir"/* ../../artifacts/${{ matrix.framework }}/
            elif [ -z "$build_dir" ]; then
              echo "No build directory needed, copying source files"
              # For frameworks without build step (alpine, vanilla)
              cp -r * ../../artifacts/${{ matrix.framework }}/
              # Remove node_modules if present
              rm -rf ../../artifacts/${{ matrix.framework }}/node_modules
            else
              echo "Expected build directory '$build_dir' not found"
              ls -la
            fi
            
            echo "Artifact contents:"
            ls -la ../../artifacts/${{ matrix.framework }}/ || echo "No artifacts created"
          else
            echo "Build failed for ${{ matrix.framework }}, skipping artifact preparation"
          fi
          
      - name: Upload build artifacts
        if: steps.build-run.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.framework }}
          path: artifacts/${{ matrix.framework }}/
          retention-days: 7
          
      - name: Generate build badge
        if: always()
        run: |
          if [[ "${{ steps.build-run.outputs.status }}" == "success" ]]; then
            status="Success"
            color="3cd96b"
            label_color="33b348"
          else
            status="Failed"
            color="ff5666"
            label_color="d5334a"
          fi
          
          badge_url="https://img.shields.io/badge/Build-${status}-${color}?logo=rocket&logoColor=fff&labelColor=${label_color}"
          curl -o "build-${{ matrix.framework }}.svg" "$badge_url"
          
      - name: Upload badge
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: badge-build-${{ matrix.framework }}
          path: build-${{ matrix.framework }}.svg
          retention-days: 1

  website:
    name: Generate Static Website
    needs: [setup, build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all build artifacts
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: builds
          
      - name: Create website structure
        run: |
          frameworks=$(echo '${{ needs.setup.outputs.frameworks }}' | jq -r '.[]' | tr '\n' ' ')
          echo "Frameworks to process: $frameworks"
          echo "Available build artifacts:"
          ls -la builds/ || echo "No builds directory found"
          if [ -d "builds" ]; then
            echo "Contents of builds directory:"
            find builds/ -type f | head -20
          fi
          mkdir -p website
          
          # Create index.html
          cat > website/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Weather App Demos</title>
            <style>
              body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui; margin: 2rem; }
              .container { max-width: 800px; margin: 0 auto; }
              .framework-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin: 2rem 0; }
              .framework-card { border: 1px solid #ddd; border-radius: 8px; padding: 1rem; text-decoration: none; color: inherit; }
              .framework-card:hover { box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
              .framework-name { font-size: 1.2rem; font-weight: bold; margin-bottom: 0.5rem; }
              .demo-link { color: #0066cc; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>üå§Ô∏è Weather App Framework Demos</h1>
              <p>Compare the same weather application built with different frontend frameworks.</p>
              <div class="framework-grid">
          EOF
          
          # Add framework cards
          for framework in $frameworks; do
            cat >> website/index.html << EOF
                <a href="/${framework}/demo/" class="framework-card">
                  <div class="framework-name">${framework^}</div>
                  <div class="demo-link">View Demo ‚Üí</div>
                </a>
          EOF
          done
          
          cat >> website/index.html << 'EOF'
              </div>
            </div>
          </body>
          </html>
          EOF
          
          # Create framework demo directories
          for framework in $frameworks; do
            framework_dir="website/${framework}/demo"
            mkdir -p "$framework_dir"
            
            # Check if build artifacts exist 
            artifact_path="builds/build-${framework}"
            if [ -d "$artifact_path" ] && [ "$(ls -A "$artifact_path" 2>/dev/null)" ]; then
              echo "Found artifacts at: $artifact_path"
              cp -r "$artifact_path"/* "$framework_dir/"
              echo "‚úÖ Added ${framework} demo"
            else
              echo "‚ö†Ô∏è No artifacts found for ${framework} at $artifact_path, creating placeholder"
              # Create placeholder if build failed
              cat > "$framework_dir/index.html" << EOF
          <!DOCTYPE html>
          <html>
          <head><title>${framework^} Demo - Build Failed</title></head>
          <body>
            <h1>Build Failed</h1>
            <p>The ${framework} demo could not be built.</p>
            <a href="/">‚Üê Back to all demos</a>
          </body>
          </html>
          EOF
              echo "‚ö†Ô∏è Build failed for ${framework}, added placeholder"
            fi
          done
          
      - name: Upload website artifacts
        uses: actions/upload-artifact@v4
        with:
          name: website
          path: website/**
          retention-days: 30

  deploy:
    name: Deploy Website
    needs: [setup, build, website]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0
          
      - name: Download website
        uses: actions/download-artifact@v4
        with:
          name: website
          path: website
          
      - name: Deploy to website branch
        run: |
          set -euo pipefail
          git config user.name 'liss-bot'
          git config user.email 'alicia-gh-bot@mail.as93.net'

          # Switch to website branch (create if missing)
          if git ls-remote --exit-code --heads origin website >/dev/null 2>&1; then
            git fetch origin website:website
            git checkout website
            git pull origin website || true
          else
            git checkout --orphan website
            git commit --allow-empty -m "init website branch" || true
          fi

          # Ensure artifact exists
          if [ ! -d "website" ] || [ -z "$(ls -A website 2>/dev/null)" ]; then
            echo "‚ö†Ô∏è No website files found in ./website"
            exit 1
          fi

          # Clear branch root but keep .git and the downloaded folder
          find . -maxdepth 1 -mindepth 1 \
            -not -name '.git' \
            -not -name 'website' \
            -exec rm -rf {} + 2>/dev/null || true

          # Copy (includes dotfiles)
          cp -a website/. .

          # Remove the website directory after copying
          rm -rf website

          # Commit only if there are changes
          if git add -A && git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No website changes to deploy"
          else
            git commit -m "Deploy website"
            git push origin website
            echo "‚úÖ Successfully deployed website"
          fi

  badges:
    name: Update Build Badges
    needs: [setup, build]
    if: always()
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0
          
      - name: Download all badges
        uses: actions/download-artifact@v4
        with:
          pattern: badge-build-*
          path: badges
          merge-multiple: true
          
      - name: Commit badges
        run: |
          git config user.name 'liss-bot'
          git config user.email 'alicia-gh-bot@mail.as93.net'
          
          # Switch to badges branch
          git fetch origin badges:badges 2>/dev/null || git checkout --orphan badges
          git checkout badges 2>/dev/null || true
          git pull origin badges 2>/dev/null || true
          
          # Copy badges and commit
          cp badges/*.svg . 2>/dev/null || echo "‚ö†Ô∏è No badge files found"
          
          if git add *.svg && git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No badge changes to commit"
          else
            git commit -m "Update build badges"
            if git push origin badges; then
              echo "‚úÖ Successfully updated build badges"
            else
              echo "‚ö†Ô∏è Failed to push badge updates"
              exit 1
            fi
          fi
