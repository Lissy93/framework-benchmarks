name: Test All Frameworks

on:
  workflow_dispatch:
    inputs:
      frameworks:
        description: 'Frameworks to test (comma-separated, see frameworks.json for available options)'
        required: false
        default: 'all'
        type: string
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup and Sync Assets
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      frameworks: ${{ steps.matrix.outputs.frameworks }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Install root dependencies
        run: |
          npm ci
          npm run install:playwright
          
      - name: Sync shared assets
        run: npm run sync-assets
        
      - name: Install framework dependencies
        run: |
          set -e  # Exit on error
          # Install dependencies for each framework app
          for app in apps/*/; do
            if [ -f "$app/package.json" ]; then
              echo "Installing dependencies for $(basename "$app")"
              cd "$app"
              npm ci || { echo "Failed to install dependencies for $(basename "$app")"; exit 1; }
              cd - > /dev/null
            fi
          done
          
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
            
      - name: Determine frameworks to test
        id: matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.frameworks }}" != "all" ]; then
            frameworks="${{ github.event.inputs.frameworks }}"
          else
            # Get framework list from centralized config
            frameworks=$(node scripts/generate-scripts.js github)
          fi
          echo "frameworks=$(echo "[$frameworks]" | sed 's/,/", "/g' | sed 's/\[/["/ ; s/\]/"]/')" >> $GITHUB_OUTPUT
          echo "Testing frameworks: $frameworks"

  test-vanilla:
    name: Test Vanilla JS
    needs: setup
    if: contains(needs.setup.outputs.frameworks, 'vanilla')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Run Vanilla JS tests
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 4
          retry_wait_seconds: 30
          command: |
            echo "üß™ Running Vanilla JS tests (attempt ${{ github.run_attempt }})"
            npm run test:vanilla -- --reporter=github
            
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vanilla-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  test-react:
    name: Test React
    needs: setup
    if: contains(needs.setup.outputs.frameworks, 'react')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Run React tests
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 4
          retry_wait_seconds: 30
          command: |
            echo "‚öõÔ∏è Running React tests (attempt ${{ github.run_attempt }})"
            npm run test:react -- --reporter=github
            
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: react-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  test-angular:
    name: Test Angular
    needs: setup
    if: contains(needs.setup.outputs.frameworks, 'angular')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Run Angular tests
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 4
          retry_wait_seconds: 30
          command: |
            echo "üÖ∞Ô∏è Running Angular tests (attempt ${{ github.run_attempt }})"
            npm run test:angular -- --reporter=github
            
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: angular-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  test-svelte:
    name: Test Svelte
    needs: setup
    if: contains(needs.setup.outputs.frameworks, 'svelte')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Run Svelte tests
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 4
          retry_wait_seconds: 30
          command: |
            echo "üî• Running Svelte tests (attempt ${{ github.run_attempt }})"
            npm run test:svelte -- --reporter=github
            
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: svelte-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  test-preact:
    name: Test Preact
    needs: setup
    if: contains(needs.setup.outputs.frameworks, 'preact')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Run Preact tests
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 4
          retry_wait_seconds: 30
          command: |
            echo "üíú Running Preact tests (attempt ${{ github.run_attempt }})"
            npm run test:preact -- --reporter=github
            
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preact-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  test-solid:
    name: Test Solid.js
    needs: setup
    if: contains(needs.setup.outputs.frameworks, 'solid')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Run Solid.js tests
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 4
          retry_wait_seconds: 30
          command: |
            echo "üöÄ Running Solid.js tests (attempt ${{ github.run_attempt }})"
            npm run test:solid -- --reporter=github
            
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: solid-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  summary:
    name: Test Summary
    needs: [setup, test-vanilla, test-react, test-angular, test-svelte, test-preact, test-solid]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate test summary
        run: |
          echo "## üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Framework | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check each framework's status
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'vanilla') }}" == "true" ]]; then
            if [[ "${{ needs.test-vanilla.result }}" == "success" ]]; then
              echo "| Vanilla JS | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.test-vanilla.result }}" == "skipped" ]]; then
              echo "| Vanilla JS | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Vanilla JS | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'react') }}" == "true" ]]; then
            if [[ "${{ needs.test-react.result }}" == "success" ]]; then
              echo "| React | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.test-react.result }}" == "skipped" ]]; then
              echo "| React | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| React | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'angular') }}" == "true" ]]; then
            if [[ "${{ needs.test-angular.result }}" == "success" ]]; then
              echo "| Angular | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.test-angular.result }}" == "skipped" ]]; then
              echo "| Angular | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Angular | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'svelte') }}" == "true" ]]; then
            if [[ "${{ needs.test-svelte.result }}" == "success" ]]; then
              echo "| Svelte | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.test-svelte.result }}" == "skipped" ]]; then
              echo "| Svelte | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Svelte | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'preact') }}" == "true" ]]; then
            if [[ "${{ needs.test-preact.result }}" == "success" ]]; then
              echo "| Preact | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.test-preact.result }}" == "skipped" ]]; then
              echo "| Preact | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Preact | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'solid') }}" == "true" ]]; then
            if [[ "${{ needs.test-solid.result }}" == "success" ]]; then
              echo "| Solid.js | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.test-solid.result }}" == "skipped" ]]; then
              echo "| Solid.js | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Solid.js | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Workflow Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          
      - name: Check overall status
        run: |
          # Determine if any tests failed
          failed_tests=""
          
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'vanilla') }}" == "true" && "${{ needs.test-vanilla.result }}" != "success" && "${{ needs.test-vanilla.result }}" != "skipped" ]]; then
            failed_tests="$failed_tests vanilla"
          fi
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'react') }}" == "true" && "${{ needs.test-react.result }}" != "success" && "${{ needs.test-react.result }}" != "skipped" ]]; then
            failed_tests="$failed_tests react"
          fi
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'angular') }}" == "true" && "${{ needs.test-angular.result }}" != "success" && "${{ needs.test-angular.result }}" != "skipped" ]]; then
            failed_tests="$failed_tests angular"
          fi
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'svelte') }}" == "true" && "${{ needs.test-svelte.result }}" != "success" && "${{ needs.test-svelte.result }}" != "skipped" ]]; then
            failed_tests="$failed_tests svelte"
          fi
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'preact') }}" == "true" && "${{ needs.test-preact.result }}" != "success" && "${{ needs.test-preact.result }}" != "skipped" ]]; then
            failed_tests="$failed_tests preact"
          fi
          if [[ "${{ contains(needs.setup.outputs.frameworks, 'solid') }}" == "true" && "${{ needs.test-solid.result }}" != "success" && "${{ needs.test-solid.result }}" != "skipped" ]]; then
            failed_tests="$failed_tests solid"
          fi
          
          if [[ -n "$failed_tests" ]]; then
            echo "‚ùå Some tests failed: $failed_tests"
            exit 1
          else
            echo "‚úÖ All tests passed successfully!"
          fi