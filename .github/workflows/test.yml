name: 🧪 Test

on:
  workflow_dispatch:
    inputs:
      frameworks:
        description: 'Frameworks to test (comma-separated, see frameworks.json for available options)'
        required: false
        default: 'all'
        type: string
  pull_request:
    branches: [ main, dev ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'frameworks.json'
      - 'config.json'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  setup:
    name: Setup and Sync Assets
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      frameworks: ${{ steps.matrix.outputs.frameworks }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: scripts/requirements.txt
          
      - name: Install Python dependencies
        run: pip install -r scripts/requirements.txt
          
      - name: Install root dependencies
        run: |
          npm ci
          npx playwright install --with-deps
          
      - name: Run Python setup script
        run: python scripts/setup/main.py --skip-build
        
      - name: Cache node_modules and Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-node-modules-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-playwright-
            ${{ runner.os }}-node-modules-
            
      - name: Determine frameworks to test
        id: matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.frameworks }}" != "all" ]; then
            frameworks="${{ github.event.inputs.frameworks }}"
          else
            # Get framework list from Python config
            frameworks=$(python scripts/get_frameworks.py)
          fi
          echo "frameworks=$(echo "[$frameworks]" | sed 's/,/", "/g' | sed 's/\[/[\"/ ; s/\]/\"]/')" >> $GITHUB_OUTPUT
          echo "Testing frameworks: $frameworks"

  test:
    name: Test ${{ matrix.framework }}
    needs: setup
    if: fromJSON(needs.setup.outputs.frameworks)[0] != ''
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        framework: ${{ fromJSON(needs.setup.outputs.frameworks) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: scripts/requirements.txt
          
      - name: Install Python dependencies
        run: pip install -r scripts/requirements.txt
          
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-node-modules-playwright-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies (if cache miss)
        run: |
          if [ ! -d "node_modules" ]; then
            echo "Dependencies cache miss - installing"
            npm ci
          else
            echo "Dependencies cache hit"
          fi
          
      - name: Add node_modules/.bin to PATH
        run: echo "${{ github.workspace }}/node_modules/.bin" >> $GITHUB_PATH
          
      - name: Install Playwright browsers (if cache miss)
        run: |
          if [ ! -d ~/.cache/ms-playwright ]; then
            echo "Playwright cache miss - installing browsers"
            npx playwright install --with-deps
          else
            echo "Playwright cache hit - skipping browser installation"
          fi
          
      - name: Verify Playwright installation
        run: |
          echo "Checking @playwright/test availability..."
          if [ -f "node_modules/@playwright/test/package.json" ]; then
            echo "✅ @playwright/test found in node_modules"
          else
            echo "❌ @playwright/test not found, forcing npm ci"
            npm ci
          fi
          
      - name: Run setup for project preparation
        run: |
          python scripts/setup/main.py --skip-build
          
      - name: Run tests for ${{ matrix.framework }}
        id: test-run
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 4
          retry_wait_seconds: 30
          command: |
            echo "🧪 Running ${{ matrix.framework }} tests (attempt ${{ github.run_attempt }})"
            # Add framework context to test output for better annotations
            echo "::group::${{ matrix.framework }} Framework Tests"
            npm run test:${{ matrix.framework }} -- --reporter=github --reporter=list
            echo "::endgroup::"
            
      - name: Create detailed result file
        if: always()
        run: |
          mkdir -p test-status test-details
          
          # Determine final status (failed if all retries exhausted)
          if [[ "${{ steps.test-run.outcome }}" == "success" ]]; then
            status="passed"
            icon="✅"
          else
            status="failed"
            icon="❌"
          fi
          
          # Create status file
          echo "$status" > test-status/${{ matrix.framework }}.txt
          
          # Create detailed results file
          cat > test-details/${{ matrix.framework }}.json << EOF
          {
            "framework": "${{ matrix.framework }}",
            "status": "$status",
            "icon": "$icon",
            "attempts": ${{ steps.test-run.outputs.total_attempts || '1' }},
            "final_attempt": ${{ steps.test-run.outputs.exit_code || '0' }},
            "duration": "${{ steps.test-run.outputs.elapsed_time || 'unknown' }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "runner": "${{ runner.os }}",
            "node_version": "$(node --version)",
            "playwright_version": "$(npx playwright --version | head -1)"
          }
          EOF
            
      - name: Upload test results (conditional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.framework }}-test-results
          path: |
            playwright-report/
            test-results/
          if-no-files-found: ignore
          retention-days: 30
          
      - name: Upload test status and details
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.framework }}-status
          path: |
            test-status/${{ matrix.framework }}.txt
            test-details/${{ matrix.framework }}.json
          retention-days: 7

  summary:
    name: Test Summary
    needs: [setup, test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Download all test status artifacts
        if: always()
        uses: actions/download-artifact@v4
        with:
          pattern: "*-status"
          path: test-artifacts
          merge-multiple: true
          
      - name: Generate enhanced test summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Change to artifacts directory
          cd test-artifacts || {
            echo "❌ No test-artifacts directory found"
            echo "| Framework | Status |" >> $GITHUB_STEP_SUMMARY  
            echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| All | ❌ **No Results** |" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          
          # Debug: List directory structure
          echo "📁 Artifacts directory structure:"
          find . -type f -name "*.txt" -o -name "*.json" | head -20 || echo "No status files found"
          
          # Get frameworks that were tested
          frameworks="${{ needs.setup.outputs.frameworks }}"
          frameworks_array=($(echo "$frameworks" | tr -d '[]"' | tr ',' '\n' | xargs))
          
          echo "🎯 Expected frameworks: ${frameworks_array[@]}"
          
          # Initialize counters
          failed_count=0
          passed_count=0
          total_count=${#frameworks_array[@]}
          
          # Create enhanced table
          echo "| Framework | Status | Duration | Attempts | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|----------|----------|---------|" >> $GITHUB_STEP_SUMMARY
          
          for framework in "${frameworks_array[@]}"; do
            echo "🔍 Processing framework: $framework"
            
            # Look for files in the nested structure
            status_file="test-status/${framework}.txt"
            details_file="test-details/${framework}.json"
            
            if [[ -f "$status_file" && -f "$details_file" ]]; then
              echo "✅ Found both files for $framework"
              status=$(cat "$status_file" 2>/dev/null || echo "unknown")
              echo "📄 Status for $framework: $status"
              
              # Debug JSON content
              echo "🔍 JSON content preview:"
              head -3 "$details_file" || echo "Cannot read JSON file"
              
              # Parse JSON details with better error handling
              if command -v jq >/dev/null 2>&1; then
                duration=$(jq -r '.duration // "unknown"' "$details_file" 2>/dev/null || echo "unknown")
                attempts=$(jq -r '.attempts // "1"' "$details_file" 2>/dev/null || echo "1") 
                icon=$(jq -r '.icon // "❓"' "$details_file" 2>/dev/null || echo "❓")
                echo "📊 Parsed data - Duration: $duration, Attempts: $attempts, Icon: $icon"
              else
                echo "⚠️ jq not available, using defaults"
                duration="unknown"
                attempts="1"
                icon="❓"
              fi
              
              if [[ "$status" == "passed" ]]; then
                echo "| **${framework}** | ${icon} **Passed** | ${duration} | ${attempts} | ✨ All tests passed |" >> $GITHUB_STEP_SUMMARY
                ((passed_count++))
                echo "✅ Added passed entry for $framework"
              else
                retry_info=""
                if [[ "$attempts" != "1" && "$attempts" -gt 1 ]] 2>/dev/null; then
                  retry_info=" (${attempts} attempts)"
                fi
                echo "| **${framework}** | ${icon} **Failed** | ${duration} | ${attempts} | ❌ Tests failed${retry_info} |" >> $GITHUB_STEP_SUMMARY
                ((failed_count++))
                echo "❌ Added failed entry for $framework"
              fi
            elif [[ -f "$status_file" ]]; then
              echo "⚠️ Found only status file for $framework"
              # Fallback for missing JSON
              status=$(cat "$status_file")
              if [[ "$status" == "passed" ]]; then
                echo "| **${framework}** | ✅ **Passed** | - | 1 | ✨ All tests passed |" >> $GITHUB_STEP_SUMMARY
                ((passed_count++))
              else
                echo "| **${framework}** | ❌ **Failed** | - | 1 | ❌ Tests failed |" >> $GITHUB_STEP_SUMMARY
                ((failed_count++))
              fi
            else
              echo "❌ No files found for $framework (looking for $status_file and $details_file)"
              echo "| **${framework}** | ⚠️ **No Result** | - | - | 🚫 Missing test results |" >> $GITHUB_STEP_SUMMARY
              ((failed_count++))
            fi
          done
          
          # Return to original directory for the rest of the script  
          cd ..
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Success rate calculation
          success_rate=$(( passed_count * 100 / total_count ))
          
          # Colorized summary boxes
          echo "## 📊 Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Percentage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Total Frameworks** | ${total_count} | 100% |" >> $GITHUB_STEP_SUMMARY
          echo "| **✅ Passed** | ${passed_count} | ${success_rate}% |" >> $GITHUB_STEP_SUMMARY
          echo "| **❌ Failed** | ${failed_count} | $(( failed_count * 100 / total_count ))% |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Status badge
          if [[ $failed_count -eq 0 ]]; then
            echo "## 🎉 Status: ALL TESTS PASSED!" >> $GITHUB_STEP_SUMMARY
            echo "> Perfect score! All ${total_count} frameworks are working correctly." >> $GITHUB_STEP_SUMMARY
          elif [[ $success_rate -ge 80 ]]; then
            echo "## ✅ Status: MOSTLY SUCCESSFUL" >> $GITHUB_STEP_SUMMARY
            echo "> ${success_rate}% success rate - ${passed_count}/${total_count} frameworks passing." >> $GITHUB_STEP_SUMMARY
          elif [[ $success_rate -ge 50 ]]; then
            echo "## ⚠️ Status: PARTIAL SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "> ${success_rate}% success rate - ${failed_count} frameworks need attention." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Status: NEEDS ATTENTION" >> $GITHUB_STEP_SUMMARY
            echo "> Only ${success_rate}% success rate - significant issues detected." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔧 Workflow Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Actor** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Run ID** | ${{ github.run_id }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Timestamp** | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
          
          # Set environment variable for final status check
          echo "FAILED_COUNT=$failed_count" >> $GITHUB_ENV
          echo "PASSED_COUNT=$passed_count" >> $GITHUB_ENV
          echo "SUCCESS_RATE=$success_rate" >> $GITHUB_ENV
          
      - name: Set workflow status
        run: |
          echo "📊 Final Results:"
          echo "   ✅ Passed: $PASSED_COUNT"
          echo "   ❌ Failed: $FAILED_COUNT"
          echo "   📈 Success Rate: $SUCCESS_RATE%"
          
          if [[ "$FAILED_COUNT" -gt 0 ]]; then
            echo ""
            echo "❌ Some framework tests failed."
            echo "ℹ️  This is expected behavior - the workflow continues even when individual frameworks fail."
            echo "📋 Check the summary above for detailed results."
            # Don't exit 1 here since we want the workflow to show as successful
            # if it completed (even with some framework failures)
          else
            echo ""
            echo "✅ All framework tests passed successfully. Party time! 🎉"
          fi
          
      - name: Create status badge data
        if: always()
        run: |
          mkdir -p badge-data
          
          # Calculate total frameworks from the array
          frameworks="${{ needs.setup.outputs.frameworks }}"
          frameworks_array=($(echo "$frameworks" | tr -d '[]"' | tr ',' '\n' | xargs))
          total_count=${#frameworks_array[@]}
          
          # Determine badge color (with null checks)
          if [[ -z "$FAILED_COUNT" || -z "$SUCCESS_RATE" ]]; then
            badge_color="lightgrey"
            badge_message="unknown"
          elif [ $FAILED_COUNT -eq 0 ]; then
            badge_color="brightgreen" 
            badge_message="${PASSED_COUNT}/${total_count} passed"
          elif [ $SUCCESS_RATE -ge 80 ]; then
            badge_color="green"
            badge_message="${PASSED_COUNT}/${total_count} passed"
          elif [ $SUCCESS_RATE -ge 50 ]; then
            badge_color="yellow"
            badge_message="${PASSED_COUNT}/${total_count} passed"
          else
            badge_color="red"
            badge_message="${PASSED_COUNT}/${total_count} passed"
          fi
          
          # Create badge JSON
          cat > badge-data/test-results.json << EOF
          {
            "schemaVersion": 1,
            "label": "tests",
            "message": "${badge_message}",
            "color": "${badge_color}",
            "namedLogo": "playwright",
            "logoColor": "white"
          }
          EOF
          
      - name: Upload badge data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: badge-data
          path: badge-data/test-results.json
          retention-days: 90
